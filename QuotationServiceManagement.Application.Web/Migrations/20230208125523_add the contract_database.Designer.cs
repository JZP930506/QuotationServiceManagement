// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuotationServiceManagement.Infrastructure.Repositories;

#nullable disable

namespace QuotationServiceManagement.Application.Web.Migrations
{
    [DbContext(typeof(QuotationServiceManagementContext))]
    [Migration("20230208125523_add the contract_database")]
    partial class addthecontract_database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.ContractAggregate.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Gcid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuotationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<double>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.ToTable("contract", "quotation");
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.ContractAggregate.ContractItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContractId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TechnologicalStandard")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("contractitem", "quotation");
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.InquiryAggregate.InquiryPartyAggregate.InquiryParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gcid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("inquiryparty", "quotation");
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.InquiryAggregate.QuotationAggregate.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gcid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<int>("InquiryPartyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuotationCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("QuotationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuotationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("quotation", "quotation");
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.InquiryAggregate.QuotationAggregate.QuotationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuotationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TechnologicalStandard")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId");

                    b.ToTable("quotationitem", "quotation");
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.ContractAggregate.Contract", b =>
                {
                    b.OwnsOne("QuotationServiceManagement.Domain.AggregatesModel.ContractAggregate.EnterpriseParty", "FirstParty", b1 =>
                        {
                            b1.Property<int>("ContractId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("BankAccount")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Fax")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("LinkMan")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("OpeningBank")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ContractId");

                            b1.ToTable("contract", "quotation");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.Navigation("FirstParty")
                        .IsRequired();
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.ContractAggregate.ContractItem", b =>
                {
                    b.HasOne("QuotationServiceManagement.Domain.AggregatesModel.ContractAggregate.Contract", null)
                        .WithMany("ContractItems")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.InquiryAggregate.InquiryPartyAggregate.InquiryParty", b =>
                {
                    b.OwnsOne("QuotationServiceManagement.Domain.Share.Models.BankInfo", "BankInfo", b1 =>
                        {
                            b1.Property<int>("InquiryPartyId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("BankAccount")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("OpeningBank")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("InquiryPartyId");

                            b1.ToTable("inquiryparty", "quotation");

                            b1.WithOwner()
                                .HasForeignKey("InquiryPartyId");
                        });

                    b.OwnsOne("QuotationServiceManagement.Domain.Share.Models.LinkInfo", "LinkInfo", b1 =>
                        {
                            b1.Property<int>("InquiryPartyId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Fax")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("LinkMan")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("InquiryPartyId");

                            b1.ToTable("inquiryparty", "quotation");

                            b1.WithOwner()
                                .HasForeignKey("InquiryPartyId");
                        });

                    b.Navigation("BankInfo")
                        .IsRequired();

                    b.Navigation("LinkInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.InquiryAggregate.QuotationAggregate.QuotationItem", b =>
                {
                    b.HasOne("QuotationServiceManagement.Domain.AggregatesModel.InquiryAggregate.QuotationAggregate.Quotation", null)
                        .WithMany("QuotationItems")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.ContractAggregate.Contract", b =>
                {
                    b.Navigation("ContractItems");
                });

            modelBuilder.Entity("QuotationServiceManagement.Domain.AggregatesModel.InquiryAggregate.QuotationAggregate.Quotation", b =>
                {
                    b.Navigation("QuotationItems");
                });
#pragma warning restore 612, 618
        }
    }
}
